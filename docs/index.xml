<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>大峰哥</title>
    <link>https://wfsui.github.io/</link>
    <description>Recent content on 大峰哥</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>© Copyright notice</copyright>
    <lastBuildDate>Mon, 11 Apr 2022 13:36:36 +0000</lastBuildDate><atom:link href="https://wfsui.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何零宕机将 2000 个微服务从本地 Kafka 集群迁移至云托管多集群平台？</title>
      <link>https://wfsui.github.io/posts/%E5%A6%82%E4%BD%95%E9%9B%B6%E5%AE%95%E6%9C%BA%E5%B0%86-2000-%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BB%8E%E6%9C%AC%E5%9C%B0-kafka-%E9%9B%86%E7%BE%A4%E8%BF%81%E7%A7%BB%E8%87%B3%E4%BA%91%E6%89%98%E7%AE%A1%E5%A4%9A%E9%9B%86%E7%BE%A4%E5%B9%B3%E5%8F%B0/</link>
      <pubDate>Mon, 11 Apr 2022 13:36:36 +0000</pubDate>
      
      <guid>https://wfsui.github.io/posts/%E5%A6%82%E4%BD%95%E9%9B%B6%E5%AE%95%E6%9C%BA%E5%B0%86-2000-%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BB%8E%E6%9C%AC%E5%9C%B0-kafka-%E9%9B%86%E7%BE%A4%E8%BF%81%E7%A7%BB%E8%87%B3%E4%BA%91%E6%89%98%E7%AE%A1%E5%A4%9A%E9%9B%86%E7%BE%A4%E5%B9%B3%E5%8F%B0/</guid>
      <description>本文最初发表于 Medium 博客，经原作者 Natan Silnitsky 授权，InfoQ 中文站翻译并分享。
2021 年，我们的团队致力于将 Wix （国外比较火的一款建站平台）的 2000 个微服务从自托管的 Kafka 集群迁移到多集群的 Confluent Cloud 平台（ Confluent Enterprise 的云端托管服务），整个过程是无缝的方式，无需服务所有者参与，且迁移是在正常通信中进行，没有任何停机。</description>
    </item>
    
    <item>
      <title>系列解读 SMC-R：透明无感提升云上 TCP 应用网络性能（一）</title>
      <link>https://wfsui.github.io/posts/%E7%B3%BB%E5%88%97%E8%A7%A3%E8%AF%BB-smc-r%E9%80%8F%E6%98%8E%E6%97%A0%E6%84%9F%E6%8F%90%E5%8D%87%E4%BA%91%E4%B8%8A-tcp-%E5%BA%94%E7%94%A8%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E4%B8%80/</link>
      <pubDate>Mon, 11 Apr 2022 13:36:36 +0000</pubDate>
      
      <guid>https://wfsui.github.io/posts/%E7%B3%BB%E5%88%97%E8%A7%A3%E8%AF%BB-smc-r%E9%80%8F%E6%98%8E%E6%97%A0%E6%84%9F%E6%8F%90%E5%8D%87%E4%BA%91%E4%B8%8A-tcp-%E5%BA%94%E7%94%A8%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E4%B8%80/</guid>
      <description>引言 Shared Memory Communication over RDMA (SMC-R) 是一种基于 RDMA 技术、兼容 socket 接口的内核网络协议，由 IBM 提出并在 2017 年贡献至 Linux 内核。SMC-R 能够帮助 TCP 网络应用程序透明使用 RDMA，获得高带宽、低时延的网络通信服务。阿里云云上操作系统 Alibaba Cloud Linux 3 以及龙蜥社区开源操作系统 Anolis 8 配合神龙弹性 RDMA (eRDMA) 首次将 SMC-R 带上云上场景，助力云上应用获得更好的网络性能：《技术揭秘：阿里云发布第四代神龙 ，SMC-R 让网络性能提升 20%》。</description>
    </item>
    
    <item>
      <title>AlphaCode 能替代人类程序员吗？网友：被替代也挺好，这样就可以少写代码多开会了</title>
      <link>https://wfsui.github.io/posts/alphacode-%E8%83%BD%E6%9B%BF%E4%BB%A3%E4%BA%BA%E7%B1%BB%E7%A8%8B%E5%BA%8F%E5%91%98%E5%90%97%E7%BD%91%E5%8F%8B%E8%A2%AB%E6%9B%BF%E4%BB%A3%E4%B9%9F%E6%8C%BA%E5%A5%BD%E8%BF%99%E6%A0%B7%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%B0%91%E5%86%99%E4%BB%A3%E7%A0%81%E5%A4%9A%E5%BC%80%E4%BC%9A%E4%BA%86/</link>
      <pubDate>Mon, 11 Apr 2022 13:36:35 +0000</pubDate>
      
      <guid>https://wfsui.github.io/posts/alphacode-%E8%83%BD%E6%9B%BF%E4%BB%A3%E4%BA%BA%E7%B1%BB%E7%A8%8B%E5%BA%8F%E5%91%98%E5%90%97%E7%BD%91%E5%8F%8B%E8%A2%AB%E6%9B%BF%E4%BB%A3%E4%B9%9F%E6%8C%BA%E5%A5%BD%E8%BF%99%E6%A0%B7%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%B0%91%E5%86%99%E4%BB%A3%E7%A0%81%E5%A4%9A%E5%BC%80%E4%BC%9A%E4%BA%86/</guid>
      <description>DeepMind 是最新的人工智能研究实验室。它推出了一个可以生成软件源代码的深度学习模型，成果令人印象深刻。该模型被称为 AlphaCode，基于 Transformer，与 OpenAI 在其代码生成模型中使用的架构是一样的。
编程是深度学习和大型语言模型颇有前途的应用之一。对编程人才日益增长的需求刺激业界发起了一场发展创作工具的竞赛，这些工具可以提升开发人员的生产力，并给非开发人员提供创造软件的工具。
而在这方面，AlphaCode 肯定给人留下了深刻印象。它已经成功解决了很多复杂的编程挑战，这些难题往往需要数小时的计划、编程和测试。有一天它可能会成为一个很好的工具，可以用来把问题描述变成实用的代码。
但它肯定没法和任何级别的人类程序员相提并论。这是一种完全不同的软件创建方法，其中没有人类的思维和直觉参与，所以是不完整的。
编程竞赛 编程挑战描述的例子（来源：DeepMind)
AlphaCode 不是业内在这一领域唯一的成果，但它完成了一项非常复杂的任务。其他类似的系统专注于生成简短的代码片段，如一个函数或一个代码块，旨在执行一个小任务（例如建立一个 web 服务器或从 API 系统中提取信息）。虽然这些任务令人印象深刻，但当语言模型被暴露在足够大的源代码语料库中时，这些任务就变得微不足道了。
相比之下，AlphaCode 的目的是解决竞争性的编程问题。编程挑战的参与者必须阅读挑战描述，理解问题，将其转化为算法解决方案，用通用语言实现它，并针对一组有限的测试案例进行评估。最后，他们的结果是根据不在实现过程中的隐藏测试的性能来评估的。编程挑战还可以有其他条件，如时间和内存限制。</description>
    </item>
    
    <item>
      <title>我在大厂这五年：从热情如火到精神焦虑，高薪升职也要离开</title>
      <link>https://wfsui.github.io/posts/%E6%88%91%E5%9C%A8%E5%A4%A7%E5%8E%82%E8%BF%99%E4%BA%94%E5%B9%B4%E4%BB%8E%E7%83%AD%E6%83%85%E5%A6%82%E7%81%AB%E5%88%B0%E7%B2%BE%E7%A5%9E%E7%84%A6%E8%99%91%E9%AB%98%E8%96%AA%E5%8D%87%E8%81%8C%E4%B9%9F%E8%A6%81%E7%A6%BB%E5%BC%80/</link>
      <pubDate>Mon, 11 Apr 2022 13:36:35 +0000</pubDate>
      
      <guid>https://wfsui.github.io/posts/%E6%88%91%E5%9C%A8%E5%A4%A7%E5%8E%82%E8%BF%99%E4%BA%94%E5%B9%B4%E4%BB%8E%E7%83%AD%E6%83%85%E5%A6%82%E7%81%AB%E5%88%B0%E7%B2%BE%E7%A5%9E%E7%84%A6%E8%99%91%E9%AB%98%E8%96%AA%E5%8D%87%E8%81%8C%E4%B9%9F%E8%A6%81%E7%A6%BB%E5%BC%80/</guid>
      <description>爱彼迎向来以活跃且极具归属感的员工社区为傲，如今前爱彼迎软件工程师 Sahil 却爆出不少“猛料”。除了无视员工间缺乏平等，爱彼迎还强势打压那些对过度工作文化不满的员工。尽管阻力重重，Sahil 和同事们仍然坚持透明和相互遵循的基础，希望建立起一个强大的社区体系。本文从 Sahil 的第一视角出发，讲述了他在爱彼迎 5 年的心路变化。
 我想有个家 我一直想有个家。我的原生家庭破裂，还经常因为是印度人而受到排挤欺压。为了挣扎求存，我只能让自己变得顽强坚韧。尽管对很多事情已经逐渐习惯，但我一直找不到真正愿意接纳我的集体，一个可以称为“家”的地方。
只有在搞开发的时候，我才能感受到最真实的自己。印度和美国社会都在反复提醒我，工作就是我安身立命的根本。好在我热爱计算机技术，这门手艺也给了我不错的职业选择。只要雇主觉得我还有用，我就能获得不菲的薪酬、声望和发展空间。这样的观念深入我心，让我以为只要自己有用就能融入新的圈层。
2016 年，刚刚迈入职场两年的我加入了爱彼迎。这家公司的使命一直是“创造一个任你遨游的世界”。为了实现这个使命，爱彼迎一直倡导社区的力量，希望在全球范围内依托数百万个“开放家庭”创造出灵活的出行住宿体系。
向来喜欢上价值的硅谷觉得这可了不得，既体现出人道主义关怀、又确实有利可图——妥妥的优质项目。于是，爱彼迎决定把这份愿景渗透到企业文化当中。正如公司创始人把每位房东视为社区的利益相关者一样，高管们则把员工们视为公司的利益相关者，让我们有权做出贡献并塑造文化。
其实，我一直对爱彼迎打造的那种“潮流小子”人设有点反感，但办公室里大家确实非常乐观，时尚的装饰和明亮的环境也时刻激励着我要好好干活。
这种心态在工程师群体里尤为常见，公司的绩效评定甚至把影响力跟工作能力直接挂钩。什么问题都可以提，什么目标都可以定，我们一路埋头生产。身边的老员工和技术大牛也引导着我们一边为发展提供技术支持，一边引导企业文化在良好轨道运行。
加入爱彼迎也让我有了更多社交渠道与欢乐的回忆。20 多岁的我第一次在旧金山有了不少好朋友。一切似乎都很美好，我觉得只要自己能做好手头的工作、这个大家庭就肯定愿意接纳我。</description>
    </item>
    
    <item>
      <title>马斯克又双叒叕食言背后：自动驾驶汽车为何长期身陷「慢车道」？</title>
      <link>https://wfsui.github.io/posts/%E9%A9%AC%E6%96%AF%E5%85%8B%E5%8F%88%E5%8F%8C%E5%8F%92%E5%8F%95%E9%A3%9F%E8%A8%80%E8%83%8C%E5%90%8E%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E6%B1%BD%E8%BD%A6%E4%B8%BA%E4%BD%95%E9%95%BF%E6%9C%9F%E8%BA%AB%E9%99%B7%E6%85%A2%E8%BD%A6%E9%81%93/</link>
      <pubDate>Mon, 11 Apr 2022 13:36:35 +0000</pubDate>
      
      <guid>https://wfsui.github.io/posts/%E9%A9%AC%E6%96%AF%E5%85%8B%E5%8F%88%E5%8F%8C%E5%8F%92%E5%8F%95%E9%A3%9F%E8%A8%80%E8%83%8C%E5%90%8E%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E6%B1%BD%E8%BD%A6%E4%B8%BA%E4%BD%95%E9%95%BF%E6%9C%9F%E8%BA%AB%E9%99%B7%E6%85%A2%E8%BD%A6%E9%81%93/</guid>
      <description>多年以来，马斯克多次承诺自动驾驶汽车即将到来 事实证明，自动驾驶汽车的底层技术极难完善。就算是备受期待的特斯拉也没能跨越这道障碍。
特斯拉公司 CEO 埃隆·马斯克曾在今年 1 月放出豪言，“如果我们今年年内还不能让自动驾驶汽车的安全性超越人类，那简直是见了鬼了。”
问题是，他已经不是第一次做此承诺了。2020 年，他就表示要在年内实现自动驾驶汽车，还强调“目前已经不存在核心难题。”再往前一年，2019 年他曾承诺特斯拉会在 2020 年之前实现自动驾驶，甚至打造一支由百万辆“机器人汽车”组成的出租车队。其实从 2014 年开始，他每年都会做出类似的预测。
从 2020 年底开始，特斯拉开始将自家“全自动驾驶”（FSD）的 Beta 测试版开放给约 6 万名特斯拉车主。除了接受安全测试，这些车主还得花 12000 美元才能获得首批特权——纯纯的“冤种”了属于是。客户们将率先体验自动驾驶辅助技术，并帮助特斯拉在全面发布该功能前做出调整和改进。</description>
    </item>
    
    <item>
      <title>HTML5 崛起之时，Java 桌面时代就已经终结了</title>
      <link>https://wfsui.github.io/posts/html5-%E5%B4%9B%E8%B5%B7%E4%B9%8B%E6%97%B6java-%E6%A1%8C%E9%9D%A2%E6%97%B6%E4%BB%A3%E5%B0%B1%E5%B7%B2%E7%BB%8F%E7%BB%88%E7%BB%93%E4%BA%86/</link>
      <pubDate>Sun, 10 Apr 2022 22:41:25 +0800</pubDate>
      
      <guid>https://wfsui.github.io/posts/html5-%E5%B4%9B%E8%B5%B7%E4%B9%8B%E6%97%B6java-%E6%A1%8C%E9%9D%A2%E6%97%B6%E4%BB%A3%E5%B0%B1%E5%B7%B2%E7%BB%8F%E7%BB%88%E7%BB%93%E4%BA%86/</guid>
      <description>2004 年 Google Maps 的面世标志着 Java 桌面时代的终结，也改变了桌面环境下“跨平台”的基本定义。
 本文作者以个人视角对 Java 桌面发展历程做了回顾，内容来自他在上世纪九十年代后期担任 Java 开发者时的所见所感，主要讲述曾经的“杀手级”桌面语言 Java 是为何从 21 世纪开始颓势尽显、步入衰落的。值得一提的是，作者如今在做一款开发者友好型 Java 桌面部署工具（jDeploy），其实他还是希望 Java 可以重拾风采，再度变得对桌面开发具有吸引力。</description>
    </item>
    
    <item>
      <title>云原生服务风险测绘分析（一）：Docker 和 Kubernetes</title>
      <link>https://wfsui.github.io/posts/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%9C%8D%E5%8A%A1%E9%A3%8E%E9%99%A9%E6%B5%8B%E7%BB%98%E5%88%86%E6%9E%90%E4%B8%80docker-%E5%92%8C-kubernetes/</link>
      <pubDate>Sun, 10 Apr 2022 22:41:25 +0800</pubDate>
      
      <guid>https://wfsui.github.io/posts/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%9C%8D%E5%8A%A1%E9%A3%8E%E9%99%A9%E6%B5%8B%E7%BB%98%E5%88%86%E6%9E%90%E4%B8%80docker-%E5%92%8C-kubernetes/</guid>
      <description>一.概述 近年来随着云原生服务的大规模应用，互联网上暴露的相应资产越来越多，通过网络空间测绘技术可对暴露的资产进行数据统计及进一步的分析，从而有效赋能态势感知、漏洞预警、风险溯源等技术领域。
笔者近期针对云原生各类服务进行了具体的测绘分析。本篇为云原生服务测绘系列的首篇，主要从资产发现、资产脆弱性和漏洞介绍、资产脆弱性发现三个维度分析了我们日常使用的 Docker 及 Kubernetes 服务所存在的风险。针对 Kubernetes 服务，由于其主要暴露资产的方式是通过 API Server，Kubelet 以及 Kubernetes Dashboard 组件，考虑到这几个组件的脆弱性、资产指纹均不一，但又与 Kubernetes 服务有着紧密的联系，故笔者将分别对这些组件进行介绍。最后笔者针对每个组件提供了一些安全建议，希望各位读者通过阅读此文可对云原生服务风险暴露有更清晰的认识。
注：文中统计的测绘数据为近一个月的国内数据，相关技术仅供研究交流，请勿应用于未授权的渗透测试。
二. Docker 资产风险测绘分析 2.</description>
    </item>
    
    <item>
      <title>泛型会让你的 Go 代码运行变慢</title>
      <link>https://wfsui.github.io/posts/%E6%B3%9B%E5%9E%8B%E4%BC%9A%E8%AE%A9%E4%BD%A0%E7%9A%84-go-%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E5%8F%98%E6%85%A2/</link>
      <pubDate>Sun, 10 Apr 2022 22:41:25 +0800</pubDate>
      
      <guid>https://wfsui.github.io/posts/%E6%B3%9B%E5%9E%8B%E4%BC%9A%E8%AE%A9%E4%BD%A0%E7%9A%84-go-%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E5%8F%98%E6%85%A2/</guid>
      <description>Go 1.18 已经到来，很多人期盼已久的首个支持泛型实现的版本也就此落地。之前，泛型一直是个热度很高、但在整个 Go 社区中备受争议的话题。
一方面，批评者们担心泛型的引入会增加复杂性，导致 Go 语言最终变得像 Java 那样冗长繁复，也有人害怕 Go 语言退化成 HaskellScript，用 Monad 代替 if。平心而论，这两种担忧都有点极端。另一方面，支持者们则认为要实现大规模代码清洁、可重用的目标，泛型不可或缺。
本文不打算参与这场论战，也不打算探讨哪些情况下适合在 Go 中使用泛型。这里，我们主要着眼于泛型难题的第三个方面：不想用泛型的系统工程师们该怎么办，特别是单态化给性能造成的影响。这样的工程师不少，这类人对泛型的性能表现都相当失望。
Go 1.</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://wfsui.github.io/about/</link>
      <pubDate>Fri, 19 Apr 2019 21:37:58 +0530</pubDate>
      
      <guid>https://wfsui.github.io/about/</guid>
      <description>测试</description>
    </item>
    
  </channel>
</rss>
