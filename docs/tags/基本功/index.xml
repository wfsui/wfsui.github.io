<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>基本功 on 大峰哥</title>
    <link>https://wfsui.github.io/tags/%E5%9F%BA%E6%9C%AC%E5%8A%9F/</link>
    <description>Recent content in 基本功 on 大峰哥</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>© Copyright notice</copyright>
    <lastBuildDate>Wed, 31 Jul 2024 02:39:52 +0000</lastBuildDate>
    <atom:link href="https://wfsui.github.io/tags/%E5%9F%BA%E6%9C%AC%E5%8A%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基本功 | 一文讲清多线程和多线程同步</title>
      <link>https://wfsui.github.io/posts/%E5%9F%BA%E6%9C%AC%E5%8A%9F--%E4%B8%80%E6%96%87%E8%AE%B2%E6%B8%85%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Wed, 31 Jul 2024 02:39:52 +0000</pubDate>
      <guid>https://wfsui.github.io/posts/%E5%9F%BA%E6%9C%AC%E5%8A%9F--%E4%B8%80%E6%96%87%E8%AE%B2%E6%B8%85%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</guid>
      <description>多线程编程是现代软件开发中的一项关键技术，在多线程编程中，开发者可以将复杂的任务分解为多个独立的线程，使其并行执行，从而充分利用多核处理器的优势。然而，多线程编程也带来了挑战，例如线程同步、死锁和竞态条件等问题。本篇文章将深入探讨多线程编程的基本概念（原子操作、CAS、Lock-free、内存屏障、伪共享、乱序执行等）、常见模式和最佳实践。通过具体的代码示例，希望能够帮助大家掌握多线程编程的核心技术，并在实际开发中应用这些知识，提升软件的性能和稳定性。&#xA;1 多线程 1.1 线程的概念 十多年前，主流观点主张在可能的情况下优先选择多进程而非多线程。如今，多线程编程已经成为编程领域的事实标准。多线程技术在很大程度上改善了程序的性能和响应能力，使其能够更加高效地利用系统资源，这不仅归功于多核处理器的普及和软硬件技术的进步，还归功于开发者对多线程编程的深入理解和技术创新。&#xA;那么什么是线程呢？线程是一个执行上下文，它包含诸多状态数据：每个线程有自己的执行流、调用栈、错误码、信号掩码、私有数据。Linux内核用任务（Task）表示一个执行流。&#xA;1.1.1 执行流 一个任务里被依次执行的指令会形成一个指令序列（IP寄存器值的历史记录），这个指令序列就是一个指令流，每个线程会有自己的执行流。考虑下面的代码（本文代码块为C++）：&#xA;int calc(int a, int b, char op) { int c = 0; if (op == &amp;#39;+&amp;#39;) c = a + b; else if (op == &amp;#39;-&amp;#39;) c = a - b; else if (op == &amp;#39;*&amp;#39;) c = a * b; else if (op == &amp;#39;/&amp;#39;) c = a / b; else printf(&amp;#34;invalid operation\n&amp;#34;); return c; } calc函数被编译成汇编指令，一行C代码对应一个或多个汇编指令，在一个线程里执行calc，那么这些机器指令会被依次执行。但是，被执行的指令序列跟代码顺序可能不完全一致，代码中的分支、跳转等语句，以及编译器对指令重排、处理器乱序执行会影响指令的真正执行顺序。</description>
    </item>
  </channel>
</rss>
